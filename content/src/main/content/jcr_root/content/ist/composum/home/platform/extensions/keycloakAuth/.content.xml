<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:cpp="http://sling.composum.com/pages/1.0"
        xmlns:jcr="http://www.jcp.org/jcr/1.0"
        xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
        xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
        jcr:primaryType="cpp:Page">
    <jcr:content
            jcr:primaryType="cpp:PageContent"
            sling:resourceType="composum/pages/components/page"
            jcr:description="Module for the Composum platform to authorize / automatically create users using &lt;a href=&quot;https://www.keycloak.org/&quot;>keycloak&lt;/a>, which provides easy integration of many OpenID identity providers like Google, Facebook etc."
            jcr:title="Authorization with Keycloak"
            template="/apps/ist/composum/templates/page/content">
        <main
                jcr:primaryType="cpp:Container"
                sling:resourceType="composum/pages/components/container/parsys">
            <row
                    jcr:primaryType="cpp:Container"
                    sling:resourceType="composum/pages/components/container/row"
                    columns="-12-">
                <column-0
                        jcr:primaryType="cpp:Container"
                        sling:resourceType="composum/pages/components/container/row/column">
                    <text
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;p>The&amp;nbsp;&lt;a href=&quot;https://bitbucket.org/ist-software/cpm-platform-auth/src/&quot;>Composum Platform Authentication Module&lt;/a>&amp;nbsp;allows OpenID authentication by integrating&amp;nbsp;&lt;a href=&quot;https://www.keycloak.org/&quot;>Keycloak&lt;/a>&amp;nbsp;with the Composum platform. Keycloak is easily configurable to&amp;nbsp; support many identity providers like Google, Facebook etc.&amp;nbsp; For new users an account will be automatically created in the Sling JCR, which can then be given access to protected content or authoring by using the&amp;nbsp;&lt;a href=&quot;/content/ist/composum/home/console/usermgr&quot;>User Manager&lt;/a>&amp;nbsp;or with workflows in the tenant module.&lt;/p>"
                            title="Introduction"/>
                    <text_1072020834
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;p>Keycloak has various premade modules that can be used to connect to a Keycloak server. For our purposes its OpenID Java servlet filter adapter and the&amp;nbsp;&lt;a href=&quot;https://www.keycloak.org/docs/latest/securing_apps/index.html#java-servlet-filter-adapter&quot;>SAML Java servlet filter adapter&lt;/a>&amp;nbsp;could be usable. We decided to base our Implementation on the SAML implementation, since that has less requests and considerably less moving parts that need to be adapted. To fit into the Composum Platform infrastructure, the implementation is done as a plugin to the Portal AuthenticationFilter instead of being a separate filter.&lt;/p>&lt;p>Main classes used in the implementation:&lt;/p>&lt;ul>&lt;li>&lt;em>KeycloakAuthenticationFilterPlugin&lt;/em>&amp;nbsp;is a plugin for the Platform AuthenticationFIlter based on Keycloak's SamlFilter - mostly to read the configuration from JCR, namely /conf/composum/platform/auth/{runmode}/keycloak-saml.xml using the Sling runmode. It is called when the user is not yet authenticated, and redirects to the Keycloak server for login. The result is then POST-ed to /saml (received with this plugin as well) , which saves the SamlSession into a HTTP session attribute and redirects back to the page the user wanted to access.&lt;/li>&lt;li>&lt;em>KeycloakAuthenticationHandler&lt;/em>&amp;nbsp;if there is already a SamlSession saved in a session attribute, the handler generates KeycloakCredentials wrapping the SamlSession. Once in a session, it also calls the KeycloakSynchronizationService to create the user with the UserManager.&lt;/li>&lt;li>&lt;em>KeycloakLoginModule&lt;/em> uses the&amp;nbsp;&lt;a href=&quot;http://jackrabbit.apache.org/oak/docs/security/authentication/preauthentication.html#withloginchain&quot;>pre-authentication combined with login module chain&lt;/a>&amp;nbsp;pattern for Jackrabbit to perform the actual authentication with the JCR.&lt;/li>&lt;li>&lt;em>KeycloakSynchronizationService&lt;/em> creates a JCR user under a configurable path, if necessary, and adds it to a configurable set of groups.&lt;/li>&lt;/ul>"
                            title="Structure of the implementation"/>
                    <text_1314008360
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;ol>&lt;li>at the first request to&amp;nbsp; a protected URL, the SlingAuthenticator will call the KeycloakAuthenticationHandler unsuccessfully (continuing as anonymous for now), then pass through the PlatformAccessFilter, which recognizes the URL as protected and calls the KeycloakAuthenticationFilterPlugin for authentication. Using the Keycloak Browerhandler, it saves the request URL, method and headers in the session and use Javascript to have the browser perform a POST calling the Keycloak server with an authentication request.&lt;/li>&lt;li>The Keycloak server will authenticate the user and use Javascript to have the browser POST it's SAML Response to the application at /saml .&lt;/li>&lt;li>The request at /saml will be passed by the PlatformAccessFilter to the KeycloakAuthenticationFilterPlugin, which turns the response over to Keycloaks SamlEndpoint. The latter checks the response, saves it as SamlResponse in the session and redirects the request back to the protected page as saved in the session.&lt;/li>&lt;li>back at the protected page the SlingAuthenticator calls KeycloakAuthenticationHandler again, which this time returns AuthenticationInfo containing KeycloakCredentials containing the SamlResponse. It also calls the KeycloakSynchronizationService to possibly create the user. The AuthenticationInfo is then put to a KeycloakLoginModule that treats it as a PreAuthenticatedLogin, leading to a Sling login with that user.&lt;/li>&lt;/ol>&lt;p>Note: this has the limitation in comparison to the original Keycloak SamlFilter that the original request headers, method and body are not restored.&lt;/p>"
                            title="Login request flow"/>
                    <text_290714063
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;p>For each environment there needs to be a client configured, since the URLs used to redirect back to the environment need to be configured. In the client settings, we choose &quot;Sign Documents&quot; in the settings to ensure an attacker can't modify the authentication in the browser and to limit possible replay attacks. The Master SAML Processing URL is the client URL with /saml appended.&lt;/p>&lt;p>At &quot;client scopes&quot; we need to create scopes for transmitting the email, role list, surname and givenname, for which there are built in mappers. These need to be assigned as default client scopes to the client.&lt;/p>&lt;p>In the client configuration &quot;Installation&quot; tab, it's possible to download a template for keycloak-saml.xml, which can be used as a basis for updating the keycloak-saml.xml . The SAML Metadata IDPSSODescriptor contains a dsig:X509Certificate, which can be included into the keycloak-saml.xml as key to verify Keycloaks signature. In comparison to the downloaded template, the settings sslPolicy, turnOffChangeSessionIdOnLogin, autodetectBearerOnly, PrincipalNameMapping will probably need change - compare the &lt;a href=&quot;https://auth.ist-software.com/auth/admin/master/console/#/realms/composum-demo/clients/f927bc02-72fa-4a6e-9c27-1d29141e47f8/installation&quot;>&lt;a href=&quot;https://auth.ist-software.com/auth/admin/master/console/#/realms/composum-demo/clients/f927bc02-72fa-4a6e-9c27-1d29141e47f8/installation&quot;>Keycloak installation documentation&lt;/a>&lt;/a>.&lt;/p>&lt;p>The Composum Platform Auth module searches the configuration in the JCR below /conf/composum/platform/auth/: for each runmode we look for a file auth.&amp;lt;runmode&amp;gt;/keycloak-saml.xml there, falling back to /conf/composum/platform/auth/keycloak-saml.xml if nothing is found.&lt;/p>"
                            title="Keycloak configuration"/>
                    <codeblock
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/codeblock"
                            bordered="{Boolean}true"
                            code="&lt;keycloak-saml-adapter xmlns=&quot;urn:keycloak:saml:adapter&quot; &#xa;                       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#xa;                       xsi:schemaLocation=&quot;urn:keycloak:saml:adapter https://www.keycloak.org/schema/keycloak_saml_adapter_1_9.xsd&quot;> &#xa;    &lt;SP entityID=&quot;localhost9090&quot; &#xa;        sslPolicy=&quot;EXTERNAL&quot; &#xa;        turnOffChangeSessionIdOnLogin=&quot;false&quot; &#xa;        autodetectBearerOnly=&quot;true&quot; &#xa;        logoutPage=&quot;/system/sling/logout&quot;> &#xa;        &lt;PrincipalNameMapping policy=&quot;FROM_ATTRIBUTE&quot; attribute=&quot;email&quot;/> &#xa;        &lt;IDP entityID=&quot;idp&quot; &#xa;             signaturesRequired=&quot;true&quot;> &#xa;            &lt;SingleSignOnService signRequest=&quot;false&quot; &#xa;                                 validateResponseSignature=&quot;true&quot; &#xa;                                 validateAssertionSignature=&quot;false&quot; &#xa;                                 requestBinding=&quot;POST&quot; &#xa;                                 bindingUrl=&quot;https://keycloakXXX/auth/realms/XXX/protocol/saml&quot;/> &#xa;            &lt;SingleLogoutService signRequest=&quot;false&quot; &#xa;                                 signResponse=&quot;false&quot; &#xa;                                 validateRequestSignature=&quot;true&quot; &#xa;                                 validateResponseSignature=&quot;true&quot; &#xa;                                 requestBinding=&quot;POST&quot; &#xa;                                 responseBinding=&quot;POST&quot; &#xa;                                 postBindingUrl=&quot;https://keycloakXXX/auth/realms/XXX/composum-demo/protocol/saml&quot; &#xa;                                 redirectBindingUrl=&quot;https://keycloakXXX/auth/realms/XXX/composum-demo/protocol/saml&quot;/> &#xa;            &lt;Keys> &#xa;                &lt;Key signing=&quot;true&quot;> &#xa;                    &lt;CertificatePem> &#xa;                        MIICqXXXX== &#xa;                    &lt;/CertificatePem> &#xa;                &lt;/Key> &#xa;            &lt;/Keys> &#xa;        &lt;/IDP> &#xa;    &lt;/SP> &#xa;&lt;/keycloak-saml-adapter> &#xa;"
                            collapsed="small"
                            collapsible="{Boolean}true"
                            language="xml"
                            title="Example keycloak-saml.xml"
                            wrapLines="{Boolean}true"/>
                    <text_1652995863
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;p>In the &quot;Composum Platform Keycloak Plugin Configuration&quot; the plugin has to be enabled.&lt;/p>&lt;p>The configuration of the &quot;Composum Platform Keycloak Synchronization Service&quot; should be reviewed - especially wrt. the users groups. For new users authorized by Keycloak, an JCR user will be created at a configurable path below /home/users/ (default /home/users/keycloak) and will get the group composum-platform-auth-external .&lt;/p>"
                            title="Platform Auth module configuration"/>
                    <text_1750716606
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;ul>&lt;li>Keycloak uses jboss-logging. The log output goes to logs/stdout.log unless the system property -Dorg.jboss.logging.provider=slf4j is given on launchpad startup.&lt;/li>&lt;/ul>"
                            textAlignment="left"
                            title="Misc. Installation requirements"/>
                    <section
                            jcr:primaryType="cpp:Container"
                            sling:resourceType="composum/pages/components/container/section"
                            jcr:title="Concerns for a variable number of hosts">
                        <text_877698475
                                jcr:primaryType="cpp:Element"
                                sling:resourceType="composum/pages/components/element/text"
                                text="&lt;p>In the simplest case of just one virtual host which needs to be authenticated, the setting &quot;&lt;a href=&quot;https://www.keycloak.org/docs/6.0/server_admin/index.html#saml-clients&quot;>Master SAML Processing URL&lt;/a>&quot; the Keycloak client configuration determines the URL the keycloak POSTs the result of the authentication. If the authentication of several virtual hosts is needed with just one&amp;nbsp; client configuration, it would be possible to override this in the keycloak-saml.xml with the setting&amp;nbsp;&lt;a href=&quot;https://www.keycloak.org/docs/6.0/securing_apps/#_saml-general-config&quot;>assertionConsumerServiceUrl&lt;/a>&amp;nbsp;. However, the Keycloak server verifies that this URL is consistent with the &lt;a href=&quot;https://www.keycloak.org/docs/6.0/server_admin/index.html#saml-clients&quot;>Valid Redirect URIs&amp;nbsp;&lt;/a>field. Unfortunately, this does not allow wildcards for the host - just for the path. Thus, it is not possible to secure an arbitrary number of virtual hosts (say, preview.*.composum.com) without a manual configuration change on introduction of a new preview host. (In addition to that, the Platform Auth module does not currently support using several keycloak-saml.xml configurations on one server.)&lt;/p>&lt;p>So, if a variable number of virtual hosts is needed, it seems necessary to either transport the session cookie from the standard login host (also called primary authentication host) to the other hosts (such as by redirecting to a special URL on the virtual host with a one-time token and setting there the session cookie explicitly), or extending the session cookie domain (e.g. to .composum.com) - configurable in the OSGI config &quot;Apache Felix Jetty Based Http Service&quot;.&lt;/p>"
                                title="The problem for login for several virtual hosts"/>
                        <text
                                jcr:primaryType="cpp:Element"
                                sling:resourceType="composum/pages/components/element/text"
                                text="&lt;p>As an example we use a setting where there is an author host, for example author.composum, where editors can login and edit all sites, and a variable number of preview hosts preview.site1.composum, preview.site2.composum for the various sites. author.composum is configured in the Keycloak server, but the preview sites are not configured there, since that'd need manual configuration each time another one is added. Assume now that the user wants to open a page on preview.site1.composum but is not yet logged in. In the simplest case, the user is already logged in at the author host author.composum. The following mechanism consisting of two servlets will ensure that the preview host gets the same session-ID as the author-host has:&lt;/p>&lt;ol>&lt;li>When a redirect to a protected URL preview.site1.composum/something needs a login, the preview host saves this URL in a token store and performs a redirect to author.composum/bin/cpm/platform/auth/sessionIdTransferTrigger?urlToken=XXXX with that token.&lt;/li>&lt;li>At the author host, a fresh token YYYY is created and the URL and the session-ID are stored with that token as a key. Then a redirect back to preview.site1.composum/bin/cpm/platform/auth/sessionIdTransferCallback?sessionToken=YYYY is triggered.&lt;/li>&lt;li>Upon receiving that call, the preview host retrieves the URL and session-ID from the token store, and performs another redirect to preview.site1.composum/something that sets the session-cookie to the stored value.&lt;/li>&lt;/ol>&lt;p>For the case that the user is not yet logged in at author, the Platform Access Filter is configured such that the sessionIdTransferTrigger needs a login. This is transparently triggered before step 2.&lt;/p>"
                                title="Session-ID Transport for virtual hosts"/>
                        <text_184120800
                                jcr:primaryType="cpp:Element"
                                sling:resourceType="composum/pages/components/element/text"
                                text="&lt;p>To enable the session id transport with keycloak there are several configurations to be done, in addition to the normal keycloak configuration.&lt;/p>&lt;ol>&lt;li>Configure the &quot;Platform Auth SessionId Transfer&quot;. It has to be enabled and at least the Authentication host URL has to be set to the base URL of the host to which Keycloak redirects to.&lt;/li>&lt;li>For the Platform Access Filter, add to the &quot;allow anonymous access on author&quot; the entry&amp;nbsp;&lt;code>^/bin/cpm/platform/auth/sessionTransferCallback$&lt;/code>&lt;/li>&lt;li>For the Pages Release Filter add an &quot;Unreleased URI&quot; entry&amp;nbsp;&lt;code>^/bin/cpm/platform/auth/sessionTransferCallback$&lt;/code>&amp;nbsp;.&lt;/li>&lt;li>If e.g. Apache HTTP server serves as gate to the Sling machines, allow external access to /bin/cpm/platform/auth/sessionTransferCallback and /bin/cpm/platform/auth/sessionTransferTrigger there.&lt;/li>&lt;/ol>"
                                title="Configuration for Session ID Transfer"/>
                    </section>
                    <text_1892275433
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;ul>&lt;li>Possibly handle several different configuration (keycloak-saml.xml) for one server.&lt;/li>&lt;li>How to check in the KeycloakLoginModule and/or KeycloakAuthenticationHandler that the SamlSession actually comes from a SAML login, not a rogue class? (And possibly that it was signed?)&lt;/li>&lt;li>Should the logins be deleted at some point?&lt;/li>&lt;/ul>"
                            title="Open points"/>
                    <text_1390959603
                            jcr:primaryType="cpp:Element"
                            sling:resourceType="composum/pages/components/element/text"
                            text="&lt;p>For debugging, central Sling classes (for to set breakpoints etc.):&lt;/p>&lt;ul>&lt;li>SlingAuthenticator.getResolver calls all AuthenticationHandlers to get the Authinfo and then calls ResolverFactory.login .&lt;/li>&lt;/ul>"
                            title="Misc. hints"/>
                </column-0>
            </row>
        </main>
        <top
                jcr:primaryType="cpp:Container"
                sling:resourceType="composum/pages/components/container/parsys">
            <title
                    jcr:primaryType="cpp:Element"
                    sling:resourceType="composum/pages/components/element/title"
                    title="OpenID Authentication using Keycloak">
                <image
                        jcr:primaryType="nt:unstructured"
                        imageRef="/content/ist/composum/assets/background/history_of_pi.jpg"/>
            </title>
        </top>
    </jcr:content>
</jcr:root>
