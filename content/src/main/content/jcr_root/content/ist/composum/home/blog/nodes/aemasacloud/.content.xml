<?xml version="1.0" encoding="UTF-8"?>
<jcr:root xmlns:cpp="http://sling.composum.com/pages/1.0"
        xmlns:jcr="http://www.jcp.org/jcr/1.0"
        xmlns:nt="http://www.jcp.org/jcr/nt/1.0"
        xmlns:sling="http://sling.apache.org/jcr/sling/1.0"
        jcr:primaryType="cpp:Page">
    <jcr:content
            jcr:primaryType="cpp:PageContent"
            sling:resourceType="composum/pages/options/blog/components/page/article"
            jcr:description="This Blog entry has both the purpose of recounting some experiences and learnings from a AEM 6.5 to AEM as a Cloud Service migration I was working on recently, and highlighing some points where the Composum Nodes and the Composum Browser can help you there."
            jcr:title="Nodes in a AEM as a Cloud migration"
            template="ist/composum/templates/blog/article">
        <top
                jcr:primaryType="cpp:Container"
                sling:resourceType="composum/pages/components/container/iparsys"/>
        <main
                jcr:primaryType="cpp:Container"
                sling:resourceType="composum/pages/components/container/parsys">
            <markup
                    jcr:primaryType="cpp:Element"
                    sling:resourceType="composum/pages/options/wiki/components/markup"
                    wikiCode="## General changes from AEM 6.5 to AEMaaCS&#xd;&#xa;&#xd;&#xa;AEM as a Cloud Service (AEMaaCS) contains quite some interesting architectural&#xd;&#xa;changes. There is an extensive documentation on that, but I'll highlight some&#xd;&#xa;things that struck me and became relevant on the project I was working on.&#xd;&#xa;&#xd;&#xa;It is hosted by AEM, and you have to adapt your system to the new deployment&#xd;&#xa;scheme. The author servers run in a cluster on a MongoDB - if you're doing a&#xd;&#xa;deployment, that'll mean that the new author server will be fired up in parallel&#xd;&#xa;to the old server, the system will switch over to the new author server and only&#xd;&#xa;then the old one is stopped. Likewise, you'll have several publish servers that&#xd;&#xa;do the actual delivery of the content, but they are running on separate JCR&#xd;&#xa;repositories that will get their content cloned from one special publish&#xd;&#xa;instance (the &quot;golden master&quot;)&#xd;&#xa;when they start, and get updated by content replication. The /apps and /libs&#xd;&#xa;content is immutable now. The outgoing content&#xd;&#xa;(including both pages and assets) is always delivered through a CDN - in fact,&#xd;&#xa;you're not even able to reach the publish servers directly (which can give you&#xd;&#xa;sometimes some problems diagnosing things). For the assets this is even more&#xd;&#xa;different: these are normally delivered by the publish server and then cached in&#xd;&#xa;the dispatcher or CDN anymore, but the publish server just provides a link to,&#xd;&#xa;e.g., the Azure cloud, where the actual rendition is stored.&#xd;&#xa;(This behaviour is, however, not visible from the browser: the redirect is&#xd;&#xa;handled within the CDN.)&#xd;&#xa;&#xd;&#xa;## Deployment process&#xd;&#xa;&#xd;&#xa;The deployment process involves creating Docker images for the new servers, and&#xd;&#xa;that process includes firing up an AEM instance during the docker build that&#xd;&#xa;deploys all the packages that compose the /apps and /libs resource tree. This&#xd;&#xa;explains in part why it takes quite some time to build and deploy a new version&#xd;&#xa;of your code, and that limits your ability to test changes on the cloud servers.&#xd;&#xa;&#xd;&#xa;There is a local version of the server that you can run on your local machine,&#xd;&#xa;but there are many differences to the cloud servers, so it's always wise to test&#xd;&#xa;your changes there, too. The deployment in the cloud can be triggered changes in&#xd;&#xa;a configurable branch of a Git server in the Adobe cloud. So, for the developer&#xd;&#xa;to be able to test our changes quickly (even before the code reviewing process,&#xd;&#xa;which of course takes some time), we had established the practice of having a&#xd;&#xa;special deployment branch that contains the develop branch, where every&#xd;&#xa;developer could merge in the changes he needs to test on the development server&#xd;&#xa;in the cloud. That branch would be frequently reset to the develop branch and&#xd;&#xa;start from scratch.&#xd;&#xa;&#xd;&#xa;## The best practices analyzer&#xd;&#xa;&#xd;&#xa;AEM recommends using their &quot;best practices analyzer&quot; (BPA) on the application to&#xd;&#xa;find out many hot spots in the application that need to be changed. That turned&#xd;&#xa;out to be very valuable and a good guide to focus the development efforts. It&#xd;&#xa;does, however, generate many many issues of widely varying importance. So we&#xd;&#xa;exported those as a CSV, imported that into a Google spreadsheet and added a&#xd;&#xa;column with a remark and ticket number that would resolve it. Thus it was easy&#xd;&#xa;to categorize the issues into TODOs, change many of them at the same time using&#xd;&#xa;filters in the spreadsheet, and even work on that in parallel to get it done&#xd;&#xa;quickly.&#xd;&#xa;&#xd;&#xa;## Identify potential blockers early&#xd;&#xa;&#xd;&#xa;While evaluating the BPA results gives you a good indication what to do&#xd;&#xa;development wise, there will be other changes that can block your progress if&#xd;&#xa;not tackled early. I'd like to suggest to think hard what could become a&#xd;&#xa;difficult to solve problem later, and check and tackle these things following&#xd;&#xa;things as early as you possibly can. These include:&#xd;&#xa;&#xd;&#xa;- Connectivity from the servers to external systems&#xd;&#xa;- User management: creating / migrating users&#xd;&#xa;- Content transfer from the old system. (Is there some migration needed?)&#xd;&#xa;- Assets and content delivery via the CDN&#xd;&#xa;- Automated user interface tests&#xd;&#xa;&#xd;&#xa;In many cases you can start to tackle these before you've even done any actual&#xd;&#xa;work on the application you want to migrate. You can, for instance, just deploy&#xd;&#xa;a random sample application on the cloud system and try running your automated&#xd;&#xa;user interface tests against that. If they fail because the sample application &#xd;&#xa;has different content - you're fine and have peace of mind. &#xd;&#xa;If they fail for some other&#xd;&#xa;reason, you can have that fixed by your testers while the developers still are&#xd;&#xa;busy making the application deployable in the cloud.&#xd;&#xa;&#xd;&#xa;Adobe themselves also have many good hints there what to check.&#xd;&#xa;"
                    wikiType="markdown"/>
            <markup_373310993
                    jcr:primaryType="cpp:Element"
                    sling:resourceType="composum/pages/options/wiki/components/markup"
                    wikiCode="## Using the Composum Browser in AEMaaCS&#xd;&#xa;&#xd;&#xa;There are various restrictions in comparison to the on premise AEM versions&#xd;&#xa;that are imposed by AEMaaCS. One of them is that the CRX DE Lite browser is&#xd;&#xa;available only on the author of the development server, but not on publish&#xd;&#xa;servers and not on the stage or production environment anymore. This can&#xd;&#xa;make it seriously difficult to find out why something doesn't work. There is&#xd;&#xa;one way to work around this: you could deploy the Composum Nodes Browser on&#xd;&#xa;your author system(s). You could deploy that on the development author,&#xd;&#xa;only, but it's also possible to put it on the stage and production&#xd;&#xa;environment if you need it there. If that's a risk to you: it's possible to&#xd;&#xa;switch it to read only mode, or you can use it in the early development&#xd;&#xa;stages only, and remove it at all later on stage / production when there is&#xd;&#xa;too much confidential data on the system, or after going live.&#xd;&#xa;&#xd;&#xa;### Inspecting the publish server's content&#xd;&#xa;&#xd;&#xa;Unfortunately it isn't that easy to deploy it on the publish servers,&#xd;&#xa;because many paths are blocked there and you don't have (or nomally need) a&#xd;&#xa;login there. But since it's often very helpful to be able to inspect the JCR&#xd;&#xa;content on the publish server. With the &#xd;&#xa;[Composum Remote Resource Provider](/content/ist/composum/home/blog/nodes/tools/remoteResourceProvider)&#xd;&#xa;there is at least a workaround that would enable you to inspect the &#xd;&#xa;anonymously readable content there.&#xd;&#xa;&#xd;&#xa;### Regain some tools from the Sling Console&#xd;&#xa;&#xd;&#xa;AEMaaCS makes the Sling Console unavailable in the cloud. To some extent&#xd;&#xa;that is replaced by the yet rudimentary Developler Console, but that omits&#xd;&#xa;many valuable tools to find problems. While it is possible to move it (&#xd;&#xa;temporarily in a pinch!) to another path by setting the configuration&#xd;&#xa;manager.root in org.apache.felix.webconsole.internal.servlet.OsgiManager for&#xd;&#xa;config.author.dev some other path like /libs/osgi , you can also use the&#xd;&#xa;Composum Browser, that gives you back many of the important tools like&#xd;&#xa;recent requests, the bundle list and so forth.&#xd;&#xa;&#xd;&#xa;### Running Groovy-Scripts&#xd;&#xa;&#xd;&#xa;At the time of speaking, the groovy console isn't working with AEMaaCS. But:&#xd;&#xa;if you install the groovy bundle(s) on the server, you can use the&#xd;&#xa;[Script Runner support](/content/ist/composum/home/nodes/browser) &#xd;&#xa;of the Composum Browser to run Groovy scripts.&#xd;&#xa;&#xd;&#xa;## Other stuff&#xd;&#xa;&#xd;&#xa;Just mentioning: I tend to introduce some debugging utilities from&#xd;&#xa;[https://github.com/ist-dresden/composum-nodes/tree/develop/xtracts/debugutil](https://github.com/ist-dresden/composum-nodes/tree/develop/xtracts/debugutil)&#xd;&#xa;if I have to solve a more difficult problem.&#xd;&#xa;"
                    wikiType="markdown"/>
        </main>
        <aside
                jcr:primaryType="cpp:Container"
                sling:resourceType="composum/pages/components/container/iparsys"/>
        <bottom
                jcr:primaryType="cpp:Container"
                sling:resourceType="composum/pages/components/container/iparsys"/>
        <meta
                jcr:primaryType="nt:unstructured"
                author="Hans-Peter Störr"
                date="{Date}2022-04-03T22:00:00.000Z"/>
        <style
                jcr:primaryType="nt:unstructured"/>
        <navigation
                jcr:primaryType="nt:unstructured"
                title="Nodes in AEMaaCS"/>
    </jcr:content>
</jcr:root>
